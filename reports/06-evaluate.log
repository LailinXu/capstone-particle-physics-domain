Traceback (most recent call last):
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# define callbacks
from tensorflow.keras.models import load_model

keras_model_conv1d = load_model('keras_model_conv1d_best.h5')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_3741/1872006818.py[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mkeras[0m[0;34m.[0m[0mmodels[0m [0;32mimport[0m [0mload_model[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[0;32m----> 4[0;31m [0mkeras_model_conv1d[0m [0;34m=[0m [0mload_model[0m[0;34m([0m[0;34m'keras_model_conv1d_best.h5'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/saving/save.py[0m in [0;36mload_model[0;34m(filepath, custom_objects, compile, options)[0m
[1;32m    204[0m       if (h5py is not None and
[1;32m    205[0m           (isinstance(filepath, h5py.File) or h5py.is_hdf5(filepath))):
[0;32m--> 206[0;31m         return hdf5_format.load_model_from_hdf5(filepath, custom_objects,
[0m[1;32m    207[0m                                                 compile)
[1;32m    208[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/saving/hdf5_format.py[0m in [0;36mload_model_from_hdf5[0;34m(filepath, custom_objects, compile)[0m
[1;32m    181[0m       [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m'No model found in config file.'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    182[0m     [0mmodel_config[0m [0;34m=[0m [0mjson_utils[0m[0;34m.[0m[0mdecode[0m[0;34m([0m[0mmodel_config[0m[0;34m.[0m[0mdecode[0m[0;34m([0m[0;34m'utf-8'[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 183[0;31m     model = model_config_lib.model_from_config(model_config,
[0m[1;32m    184[0m                                                custom_objects=custom_objects)
[1;32m    185[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/saving/model_config.py[0m in [0;36mmodel_from_config[0;34m(config, custom_objects)[0m
[1;32m     55[0m                     '`Sequential.from_config(config)`?')
[1;32m     56[0m   [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mpython[0m[0;34m.[0m[0mkeras[0m[0;34m.[0m[0mlayers[0m [0;32mimport[0m [0mdeserialize[0m  [0;31m# pylint: disable=g-import-not-at-top[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 57[0;31m   [0;32mreturn[0m [0mdeserialize[0m[0;34m([0m[0mconfig[0m[0;34m,[0m [0mcustom_objects[0m[0;34m=[0m[0mcustom_objects[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     58[0m [0;34m[0m[0m
[1;32m     59[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/layers/serialization.py[0m in [0;36mdeserialize[0;34m(config, custom_objects)[0m
[1;32m    171[0m   """
[1;32m    172[0m   [0mpopulate_deserializable_objects[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 173[0;31m   return generic_utils.deserialize_keras_object(
[0m[1;32m    174[0m       [0mconfig[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    175[0m       [0mmodule_objects[0m[0;34m=[0m[0mLOCAL[0m[0;34m.[0m[0mALL_OBJECTS[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/utils/generic_utils.py[0m in [0;36mdeserialize_keras_object[0;34m(identifier, module_objects, custom_objects, printable_module_name)[0m
[1;32m    352[0m [0;34m[0m[0m
[1;32m    353[0m       [0;32mif[0m [0;34m'custom_objects'[0m [0;32min[0m [0marg_spec[0m[0;34m.[0m[0margs[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 354[0;31m         return cls.from_config(
[0m[1;32m    355[0m             [0mcls_config[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    356[0m             custom_objects=dict(

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/engine/training.py[0m in [0;36mfrom_config[0;34m(cls, config, custom_objects)[0m
[1;32m   2254[0m     [0;31m# be constructed for FunctionalModel[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2255[0m     [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mpython[0m[0;34m.[0m[0mkeras[0m[0;34m.[0m[0mengine[0m [0;32mimport[0m [0mfunctional[0m  [0;31m# pylint: disable=g-import-not-at-top[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2256[0;31m     return functional.Functional.from_config(
[0m[1;32m   2257[0m         config, custom_objects=custom_objects)
[1;32m   2258[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/engine/functional.py[0m in [0;36mfrom_config[0;34m(cls, config, custom_objects)[0m
[1;32m    666[0m         [0mValueError[0m[0;34m:[0m [0mIn[0m [0mcase[0m [0mof[0m [0mimproperly[0m [0mformatted[0m [0mconfig[0m [0mdict[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    667[0m     """
[0;32m--> 668[0;31m     input_tensors, output_tensors, created_layers = reconstruct_from_config(
[0m[1;32m    669[0m         config, custom_objects)
[1;32m    670[0m     model = cls(inputs=input_tensors, outputs=output_tensors,

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/engine/functional.py[0m in [0;36mreconstruct_from_config[0;34m(config, custom_objects, created_layers)[0m
[1;32m   1273[0m   [0;31m# First, we create all layers and enqueue nodes to be processed[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1274[0m   [0;32mfor[0m [0mlayer_data[0m [0;32min[0m [0mconfig[0m[0;34m[[0m[0;34m'layers'[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1275[0;31m     [0mprocess_layer[0m[0;34m([0m[0mlayer_data[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1276[0m   [0;31m# Then we process nodes in order of layer depth.[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1277[0m   [0;31m# Nodes that cannot yet be processed (if the inbound node[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/engine/functional.py[0m in [0;36mprocess_layer[0;34m(layer_data)[0m
[1;32m   1255[0m       [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mpython[0m[0;34m.[0m[0mkeras[0m[0;34m.[0m[0mlayers[0m [0;32mimport[0m [0mdeserialize[0m [0;32mas[0m [0mdeserialize_layer[0m  [0;31m# pylint: disable=g-import-not-at-top[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1256[0m [0;34m[0m[0m
[0;32m-> 1257[0;31m       [0mlayer[0m [0;34m=[0m [0mdeserialize_layer[0m[0;34m([0m[0mlayer_data[0m[0;34m,[0m [0mcustom_objects[0m[0;34m=[0m[0mcustom_objects[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1258[0m       [0mcreated_layers[0m[0;34m[[0m[0mlayer_name[0m[0;34m][0m [0;34m=[0m [0mlayer[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1259[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/layers/serialization.py[0m in [0;36mdeserialize[0;34m(config, custom_objects)[0m
[1;32m    171[0m   """
[1;32m    172[0m   [0mpopulate_deserializable_objects[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 173[0;31m   return generic_utils.deserialize_keras_object(
[0m[1;32m    174[0m       [0mconfig[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    175[0m       [0mmodule_objects[0m[0;34m=[0m[0mLOCAL[0m[0;34m.[0m[0mALL_OBJECTS[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/utils/generic_utils.py[0m in [0;36mdeserialize_keras_object[0;34m(identifier, module_objects, custom_objects, printable_module_name)[0m
[1;32m    352[0m [0;34m[0m[0m
[1;32m    353[0m       [0;32mif[0m [0;34m'custom_objects'[0m [0;32min[0m [0marg_spec[0m[0;34m.[0m[0margs[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 354[0;31m         return cls.from_config(
[0m[1;32m    355[0m             [0mcls_config[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    356[0m             custom_objects=dict(

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/layers/core.py[0m in [0;36mfrom_config[0;34m(cls, config, custom_objects)[0m
[1;32m   1017[0m   [0;32mdef[0m [0mfrom_config[0m[0;34m([0m[0mcls[0m[0;34m,[0m [0mconfig[0m[0;34m,[0m [0mcustom_objects[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1018[0m     [0mconfig[0m [0;34m=[0m [0mconfig[0m[0;34m.[0m[0mcopy[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1019[0;31m     function = cls._parse_function_from_config(
[0m[1;32m   1020[0m         config, custom_objects, 'function', 'module', 'function_type')
[1;32m   1021[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/layers/core.py[0m in [0;36m_parse_function_from_config[0;34m(cls, config, custom_objects, func_attr_name, module_attr_name, func_type_attr_name)[0m
[1;32m   1069[0m     [0;32melif[0m [0mfunction_type[0m [0;34m==[0m [0;34m'lambda'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1070[0m       [0;31m# Unsafe deserialization from bytecode[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1071[0;31m       function = generic_utils.func_load(
[0m[1;32m   1072[0m           config[func_attr_name], globs=globs)
[1;32m   1073[0m     [0;32melif[0m [0mfunction_type[0m [0;34m==[0m [0;34m'raw'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.9/site-packages/tensorflow/python/keras/utils/generic_utils.py[0m in [0;36mfunc_load[0;34m(code, defaults, closure, globs)[0m
[1;32m    455[0m   [0;32mexcept[0m [0;34m([0m[0mUnicodeEncodeError[0m[0;34m,[0m [0mbinascii[0m[0;34m.[0m[0mError[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    456[0m     [0mraw_code[0m [0;34m=[0m [0mcode[0m[0;34m.[0m[0mencode[0m[0;34m([0m[0;34m'raw_unicode_escape'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 457[0;31m   [0mcode[0m [0;34m=[0m [0mmarshal[0m[0;34m.[0m[0mloads[0m[0;34m([0m[0mraw_code[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    458[0m   [0;32mif[0m [0mglobs[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    459[0m     [0mglobs[0m [0;34m=[0m [0mglobals[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: bad marshal data (unknown type code)
ValueError: bad marshal data (unknown type code)

