Traceback (most recent call last):
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, BatchNormalization, Conv1D, Flatten, Lambda, GlobalAveragePooling1D
import tensorflow.keras.backend as K

# define Deep Sets model with Conv1D Keras layer
inputs = Input(shape=(ntracks,nfeatures,), name = 'input')  
x = BatchNormalization(name='bn_1')(inputs)
x = Conv1D(64, 1, strides=1, padding='same', name = 'conv1d_1', activation='relu')(x)
x = Conv1D(32, 1, strides=1, padding='same', name = 'conv1d_2', activation='relu')(x)
x = Conv1D(32, 1, strides=1, padding='same', name = 'conv1d_3', activation='relu')(x)
# sum over tracks
x = GlobalAveragePooling1D(x, name='pool_1')
x = Dense(100, name = 'dense_1', activation='relu')(x)
outputs = Dense(nlabels, name = 'output', activation='softmax')(x)
keras_model_conv1d = Model(inputs=inputs, outputs=outputs)
keras_model_conv1d.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
print(keras_model_conv1d.summary())
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-9-a9edf016d46f>[0m in [0;36m<module>[0;34m[0m
[1;32m     10[0m [0mx[0m [0;34m=[0m [0mConv1D[0m[0;34m([0m[0;36m32[0m[0;34m,[0m [0;36m1[0m[0;34m,[0m [0mstrides[0m[0;34m=[0m[0;36m1[0m[0;34m,[0m [0mpadding[0m[0;34m=[0m[0;34m'same'[0m[0;34m,[0m [0mname[0m [0;34m=[0m [0;34m'conv1d_3'[0m[0;34m,[0m [0mactivation[0m[0;34m=[0m[0;34m'relu'[0m[0;34m)[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     11[0m [0;31m# sum over tracks[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 12[0;31m [0mx[0m [0;34m=[0m [0mGlobalAveragePooling1D[0m[0;34m([0m[0mx[0m[0;34m,[0m [0mname[0m[0;34m=[0m[0;34m'pool_1'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     13[0m [0mx[0m [0;34m=[0m [0mDense[0m[0;34m([0m[0;36m100[0m[0;34m,[0m [0mname[0m [0;34m=[0m [0;34m'dense_1'[0m[0;34m,[0m [0mactivation[0m[0;34m=[0m[0;34m'relu'[0m[0;34m)[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m [0moutputs[0m [0;34m=[0m [0mDense[0m[0;34m([0m[0mnlabels[0m[0;34m,[0m [0mname[0m [0;34m=[0m [0;34m'output'[0m[0;34m,[0m [0mactivation[0m[0;34m=[0m[0;34m'softmax'[0m[0;34m)[0m[0;34m([0m[0mx[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/tensorflow/python/keras/layers/pooling.py[0m in [0;36m__init__[0;34m(self, data_format, **kwargs)[0m
[1;32m    632[0m   [0;32mdef[0m [0m__init__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mdata_format[0m[0;34m=[0m[0;34m'channels_last'[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    633[0m     super(GlobalAveragePooling1D, self).__init__(data_format=data_format,
[0;32m--> 634[0;31m                                                  **kwargs)
[0m[1;32m    635[0m     [0mself[0m[0;34m.[0m[0msupports_masking[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    636[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/tensorflow/python/keras/layers/pooling.py[0m in [0;36m__init__[0;34m(self, data_format, **kwargs)[0m
[1;32m    581[0m     [0msuper[0m[0;34m([0m[0mGlobalPooling1D[0m[0;34m,[0m [0mself[0m[0;34m)[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    582[0m     [0mself[0m[0;34m.[0m[0minput_spec[0m [0;34m=[0m [0mInputSpec[0m[0;34m([0m[0mndim[0m[0;34m=[0m[0;36m3[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 583[0;31m     [0mself[0m[0;34m.[0m[0mdata_format[0m [0;34m=[0m [0mconv_utils[0m[0;34m.[0m[0mnormalize_data_format[0m[0;34m([0m[0mdata_format[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    584[0m [0;34m[0m[0m
[1;32m    585[0m   [0;32mdef[0m [0mcompute_output_shape[0m[0;34m([0m[0mself[0m[0;34m,[0m [0minput_shape[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/ml-latest/lib/python3.7/site-packages/tensorflow/python/keras/utils/conv_utils.py[0m in [0;36mnormalize_data_format[0;34m(value)[0m
[1;32m    186[0m   [0;32mif[0m [0mvalue[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    187[0m     [0mvalue[0m [0;34m=[0m [0mbackend[0m[0;34m.[0m[0mimage_data_format[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 188[0;31m   [0mdata_format[0m [0;34m=[0m [0mvalue[0m[0;34m.[0m[0mlower[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    189[0m   [0;32mif[0m [0mdata_format[0m [0;32mnot[0m [0;32min[0m [0;34m{[0m[0;34m'channels_first'[0m[0;34m,[0m [0;34m'channels_last'[0m[0;34m}[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    190[0m     raise ValueError('The `data_format` argument must be one of '

[0;31mAttributeError[0m: 'Tensor' object has no attribute 'lower'
AttributeError: 'Tensor' object has no attribute 'lower'

